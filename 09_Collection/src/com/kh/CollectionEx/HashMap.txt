
Map : 특정 키워드(key)를 입력하면 해당되는 값(value)를 얻을 수 있는 컬렉션 개체

K : V 형식으로 구성
K : V 한 쌍을 Entry 라고 부름

Entry : 데이터가 저장된 항목의 단위

K (=key) : 키워드 역할(변수명과 같음)
            - 중복 사용 불가능(재정의의 경우 덮어쓰기가 됨)
            - 순서 유지를 하지 않음(LinkedHashMap 은 제외)
Key 만 묶어서 보면 Set 과 같이 중복을 허용하지 않는다는 특징이 있음
: Map.keySet() / Map.EntrySet() 제공

Value : 키에 해당하는 상세값

Map 인터페이스를구현한 가장 많이 사용되는 데이터 구조

키 - 값 (key - value) 를 한 쌍으로 데이터를 저장함

주요 메서드(기능)

put(K key, V value) : 키-값을 추가 / 수정
get(Obj key) : 키에 해당하는 value 반환
remove(Obj key) : 키-값 쌍 제거
containsKey(Obj key) : 특정 키가 존재하는지 확인
containsValue(Obj value) : 특정 값이 존재하는지 확인
size() : 목록에 저장된 키-쌍이 몇개인지 개수로 반환
isEmpty() : 비어있는지 확인


======================================================================


                           keySet()                                        entrySet()

반환 데이터                목록에 키                                       목록에 키-값
                           Set<key>                                        Set<Map.Entry<key, value>>

주 사용 용도               key 만 필요할 때                                key value 모두 필요할 때

회전 중 값 접근            map.get(key) 호출로 접근                        entry.getValue()로 바로 접근

성능                       key 만 처리하므로 상대적으로 가벼움             key, value 를 모두 처리하므로 상대적으로 사용량 큼

