자바 컬렉션

Java Collection

데이터를 효율적으로 관리하고 조작하기 위한 데이터 구조와 알고리즘의 집함

주요 인터페이스 : List set Map Queue

인터페이스로 만들어진 객체 : ArrayList, HashSet, LinkedList, HashMap



인터페이스           특징                      인터페이스로 만들어진 객체

List        순서가 있는 데이터, 중복 허용       ArrayList, LinkedList, Vector

Set         순서가 없고, 중복을 허용하지 않음   HashSet, TreeSet, LinkedHashSet

Map         키-값이 짝 형태로 데이터를 관리     HashMap, TreeMap, LinkedHashMap

Queue       FIFO(First in, First out) 처리      LinkedList, PriorityQueue

Deque       양끝에서 삽입/삭제 가능 Queue       ArrayDeque, LinkedList


Collection (상위 인터페이스)
 ├── List: 순서 있는 컬렉션
 │     ├── ArrayList : 데이터 접근 속도가 빠름 / 수정 느림 / 저장 공간이 부족하면 자동으로 크기를 증가
 │     ├── LinkedList : 데이터를 수정 빠름 / 데이터 접근 느림
 │     └── Vector (Thread-Safe) : List 중에서 가장 먼저 나옴 / 느리고 증가폭이 2배로 큼
 ├── Set: 중복 없는 컬렉션
 │     ├── HashSet : 순서 x / 중복 제거 / 빠른 검색 속도 제공
 │     ├── TreeSet (정렬 지원) / 정렬된 상태로 저장 / 삽입 및 삭제 속도가 HashSet 보다 느림 / 메모리 사용량 많음
 │     └── LinkedHashSet (삽입 순서 유지)
 │     └── 순서가 중요하지 않으면 HashSet / 정렬된 상태가 필요하면 TreeSet / 삽입 순서가 중요하면 LinkedHashSet
 └── Queue: 순서에 따라 처리되는 컬렉션
       ├── PriorityQueue (우선순위 큐)
       └── Deque (양방향 큐)
Map (키-값 쌍을 다루는 인터페이스)
 ├── HashMap (빠른 접근 속도) : 저장의 순서 X, 빠른 데이터 접근 속도, 메모리 사용량 비교적 많음
 ├── TreeMap (정렬된 키 관리) : 저장의 순서 O, 키가 정렬된 상태로 유지, 검색 및 정렬에 유리, 삽입 삭제 검색이 느림
 └── LinkedHashMap (삽입 순서 유지) : 삽입된 순서 유지, 예측 가능한 반환 순서, 메모리 사용량 증가
 └── 빠른 검색 속도가 필요하면 HashMap / 정렬된 상태 유지가 필요하면 TreeMap / 삽입 순서의 유지가 필요하면 LinkedHashMap
             제품의 ID 정보                   숫자, 점수의 순차적 처리                타임라인에 따른 로그